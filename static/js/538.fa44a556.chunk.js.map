{"version":3,"file":"static/js/538.fa44a556.chunk.js","mappings":"4TAEAA,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGT,SAAeC,IAAtB,+B,aAAO,O,oBAAA,oGACkBF,IAAAA,IAAA,oCAAuCC,IADzD,cACCE,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAiCC,GAAjC,uFACkBP,IAAAA,IAAA,gCACIC,EADJ,kBACqBM,IAFvC,cACCJ,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEAOA,SAAeG,EAAtB,kC,aAAO,O,oBAAA,WAA+BC,GAA/B,uFACkBT,IAAAA,IAAA,iBAAoBS,EAApB,oBAAkCR,IADpD,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeM,EAAtB,kC,aAAO,O,oBAAA,WAA+BD,GAA/B,uFACkBT,IAAAA,IAAA,iBACXS,EADW,4BACWR,EADX,oBADlB,cACCE,EADD,yBAIEA,EAASC,KAAKO,MAJhB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BH,GAA5B,uFACkBT,IAAAA,IAAA,iBACXS,EADW,4BACWR,EADX,oBADlB,cACCE,EADD,yBAIEA,EAASC,KAAKC,SAJhB,oE,qHC7BP,EAA4B,6BAA5B,EAAgE,wBAAhE,EAAiG,0BAAjG,EAAmI,yBAAnI,EAAoK,yB,SCIrJ,SAASQ,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOR,EAAP,KAAoBS,EAApB,KAeA,OACE,mBAAQC,UAAWC,EAAnB,UACE,kBAAMD,UAAWC,EAAQJ,SAXR,SAACK,GAEpB,GADAA,EAAEC,iBACyB,KAAvBb,EAAYc,OACd,OAAOC,EAAAA,EAAAA,IAAM,oCAEfR,EAASP,GACTS,EAAe,KAKb,WACE,kBACEC,UAAWC,EACXK,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,sBACZC,MAAOpB,EACPqB,SAvBa,SAACT,GACpBH,EAAeG,EAAEU,cAAcF,MAAMG,mBAwBjC,mBAAQP,KAAK,SAASN,UAAWC,EAAjC,qBAGA,iBAAMD,UAAWC,S,wBC7BV,SAASa,IAAc,IAAD,EACnC,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCnB,EAAAA,EAAAA,UAAQ,UAC5CkB,EAAaE,IAAI,gBAD2B,QACf,IAD/B,eAAO5B,EAAP,KAAoBS,EAApB,KAGA,GAAwBD,EAAAA,EAAAA,UAAS,IAAjC,eAAOX,EAAP,KAAagC,EAAb,KACA,GAA8BrB,EAAAA,EAAAA,WAAS,GAAvC,eAAOsB,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MAwBjB,OAhBAC,EAAAA,EAAAA,YAAU,WACHlC,IAGL+B,GAAW,IACXhC,EAAAA,EAAAA,IAAkBC,GAAamC,MAAK,SAACtC,GACf,IAAhBA,EAAKuC,SACPrB,EAAAA,EAAAA,IAAM,mCAAD,OACgCf,EADhC,qCAIP6B,EAAQhC,GACRkC,GAAW,SAEZ,CAAC/B,KAGF,iCACE,SAACM,EAAD,CAAWC,SAxBU,SAACP,GACxBS,EAAeT,GACf2B,EAAgB,CAAEU,MAAOrC,IACzB6B,EAAQ,OAsBLC,IAAW,SAACQ,EAAA,EAAD,IACXzC,IACC,wBACGA,EAAK0C,KAAI,SAAC1C,GAAD,OACR,yBACE,SAAC,KAAD,CAAM2C,GAAE,UAAK3C,EAAKK,IAAMuC,MAAO,CAAEC,KAAMV,GAAvC,SACGnC,EAAK8C,MAAQ9C,EAAK8C,MAAQ9C,EAAK+C,QAF3B/C,EAAKK","sources":["API/Api.jsx","webpack://goit-react-hw-05-movies/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\r\nconst API_KEY = \"fe6dc393810702cab99031f1eed25696\";\r\n\r\n//--список самых популярных фильмов--//\r\nexport async function fetchTrendingMovies() {\r\n  const response = await axios.get(`/trending/all/day?api_key=${API_KEY}`);\r\n  return response.data.results;\r\n}\r\n//--поиск кинофильма по ключевому слову--//\r\nexport async function fetchMoviesSearch(searchQuery) {\r\n  const response = await axios.get(\r\n    `/search/movie?api_key=${API_KEY}&query=${searchQuery}`\r\n  );\r\n  return response.data.results;\r\n}\r\n//--полная информация о фильме--//\r\nexport async function fetchMoviesById(id) {\r\n  const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\r\n  return response.data;\r\n}\r\n//--информация о актёрском составе--//\r\nexport async function fetchMoviesCast(id) {\r\n  const response = await axios.get(\r\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\r\n  );\r\n  return response.data.cast;\r\n}\r\n//--запрос обзоров для страницы кинофильма--//\r\nexport async function fetchReviews(id) {\r\n  const response = await axios.get(\r\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\r\n  );\r\n  return response.data.results;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Searchbar\":\"Searchbar_Searchbar__4isMs\",\"form\":\"Searchbar_form__oMpj5\",\"button\":\"Searchbar_button__y9ecs\",\"label\":\"Searchbar_label__UsISv\",\"input\":\"Searchbar_input__yBxE1\"};","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { toast } from \"react-toastify\";\r\nimport s from \"./Searchbar.module.css\";\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setSearchQuery(e.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (searchQuery.trim() === \"\") {\r\n      return toast(\"Enter your search query, please.\");\r\n    }\r\n    onSubmit(searchQuery);\r\n    setSearchQuery(\"\");\r\n  };\r\n\r\n  return (\r\n    <header className={s.Searchbar}>\r\n      <form className={s.form} onSubmit={handleSubmit}>\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Enter movie name...\"\r\n          value={searchQuery}\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\" className={s.button}>\r\n          Search\r\n        </button>\r\n        <span className={s.label}></span>\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { useLocation, useSearchParams, Link } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport Searchbar from \"../../components/Searchbar/Searchbar\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport { fetchMoviesSearch } from \"../../API/Api\";\r\n\r\nexport default function MoviesPage() {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [searchQuery, setSearchQuery] = useState(\r\n    searchParams.get(\"query\") ?? \"\"\r\n  );\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const location = useLocation();\r\n\r\n  const handleFormSubmit = (searchQuery) => {\r\n    setSearchQuery(searchQuery);\r\n    setSearchParams({ query: searchQuery });\r\n    setData([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!searchQuery) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    fetchMoviesSearch(searchQuery).then((data) => {\r\n      if (data.length === 0) {\r\n        toast(\r\n          `Sorry, the movie with the title ${searchQuery}is not found. Enter another name`\r\n        );\r\n      }\r\n      setData(data);\r\n      setLoading(false);\r\n    });\r\n  }, [searchQuery]);\r\n\r\n  return (\r\n    <>\r\n      <Searchbar onSubmit={handleFormSubmit} />\r\n      {loading && <Loader />}\r\n      {data && (\r\n        <ul>\r\n          {data.map((data) => (\r\n            <li key={data.id}>\r\n              <Link to={`${data.id}`} state={{ from: location }}>\r\n                {data.title ? data.title : data.name}\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":["axios","API_KEY","fetchTrendingMovies","response","data","results","fetchMoviesSearch","searchQuery","fetchMoviesById","id","fetchMoviesCast","cast","fetchReviews","Searchbar","onSubmit","useState","setSearchQuery","className","s","e","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","MoviesPage","useSearchParams","searchParams","setSearchParams","get","setData","loading","setLoading","location","useLocation","useEffect","then","length","query","Loader","map","to","state","from","title","name"],"sourceRoot":""}